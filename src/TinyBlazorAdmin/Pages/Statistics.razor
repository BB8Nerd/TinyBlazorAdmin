
@page "/statistics"

@using Syncfusion.Blazor.Charts
@using TinyBlazorAdmin.Data
@using Microsoft.AspNetCore.Authorization
@inject IJSRuntime JSRuntime;
@* @attribute [Authorize] *@

@inject AzFuncClient azClient

<h3>Statistics</h3>

<SfChart Title="Click Stats">
    <ChartEvents Load="ChartLoad"/>
    <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
    <ChartPrimaryXAxis  ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime"  
                        LabelFormat="y/M/d" 
                        IntervalType="IntervalType.Days" 
                        EdgeLabelPlacement="EdgeLabelPlacement.Shift">
        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
    </ChartPrimaryXAxis>

    <ChartPrimaryYAxis  LabelFormat="{value}" 
                        RangePadding="ChartRangePadding.None" 
                        Minimum="0" 
                        Maximum="5">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
    </ChartPrimaryYAxis>
    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>

    <ChartSeriesCollection>
        <ChartSeries    DataSource="@clicksHistory" 
                        Name="someData"
                        XName="XValue" 
                        YName="YValue" 
                        Width="2"
                        Opacity="1"
                        Type="ChartSeriesType.Line">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
<p>@((MarkupString)test)</p>

@code {
    private ClickStatsEntityList clickStatsList;
    private List<ClickData> clicksHistory = new List<ClickData>();
    
    private string test = "";

    private readonly Random _random = new Random(); 

    public class ClickData
    {
        public string XValue;
        public int YValue;
    }

    private async Task UpdateUIList()
    {
        clickStatsList = await azClient.GetClickStats("awesome");

         var temp = clickStatsList.ClickStatsList.GroupBy( s => DateTime.Parse(s.Datetime).Date)
                                            .Select(stat => new ClickData{
                                                XValue = stat.Key.ToShortDateString(),
                                                YValue = stat.Count()
                                            }); 

        //var temp = clickStatsList.ClickStatsList.Select(stat => new ClickData{
        //                                        XValue = DateTime.Parse(stat.Datetime),
        //                                        YValue = _random.Next(10)});
        //                     
        clicksHistory = temp.ToList();

        foreach(var x in clicksHistory){
            test += "<br/>(" + x.XValue + " --- " + x.YValue + ")" + "\n";
        }

        //StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        //await UpdateUIList();
    } 


    protected async Task ChartLoad(ILoadedEventArgs Args){
        //clicksHistory.Add(new ClickData{XValue = new DateTime(2005, 01, 01), YValue = _random.Next(100)});
        //clicksHistory.Add(new ClickData{XValue = new DateTime(2006, 01, 01), YValue = _random.Next(100)});
        //clicksHistory.Add(new ClickData{XValue = new DateTime(2007, 01, 01), YValue = _random.Next(100)});
        //clicksHistory.Add(new ClickData{XValue = new DateTime(2008, 01, 01), YValue = _random.Next(100)});
        //clicksHistory.Add(new ClickData{XValue = new DateTime(2009, 01, 01), YValue = _random.Next(100)});
        //clicksHistory.Add(new ClickData{XValue = new DateTime(2010, 01, 01), YValue = _random.Next(100)});
        //clicksHistory.Add(new ClickData{XValue = new DateTime(2011, 01, 01), YValue = _random.Next(100)});
        //clicksHistory.Add(new ClickData{XValue = new DateTime(2012, 01, 01), YValue = _random.Next(100)});

        await UpdateUIList();
    }
}
