@page "/statistics"
@page "/statistics/{vanity}"

@using Syncfusion.Blazor.Charts
@using Cloud5mins.AzShortener
@using Microsoft.AspNetCore.Authorization
@using System.Collections.ObjectModel
@using System.Text.Json
@inject IJSRuntime JSRuntime;
@inject HttpClient Http


<h1>Click Statistics</h1>
<h3>@subTitle</h3>
<a href="/UrlManager/"> &lt;&lt; Back</a>
@if (clicksHistory != null)
{
<SfChart Title="Click Stats" DataSource="@clicksHistory" >
    <ChartEvents/>
    <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
    <ChartPrimaryXAxis  ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime"  
                        LabelFormat="y/M/d" 
                        EdgeLabelPlacement="EdgeLabelPlacement.Shift" RangePadding="ChartRangePadding.Auto">
        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
    </ChartPrimaryXAxis>

    <ChartPrimaryYAxis  LabelFormat="{value}" >
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
    </ChartPrimaryYAxis>
    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>

    <ChartSeriesCollection>
        <ChartSeries    DataSource="@clicksHistory" 
                        Name="Click(s) by Day"
                        XName="XValue" 
                        YName="YValue" 
                        Width="2"
                        Opacity="1"
                        Type="ChartSeriesType.Line">
            <ChartMarker Visible="true" Width="10" Height="10"></ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
}
else
{
    <p>Chart Loading, it can take a few seconds</p>
}
<p>@((MarkupString)test)</p>

@code {
    [Parameter]
    public string? vanity { get; set; }
    private string subTitle = "";
    private ClickDateList clickStatsList;
    private ObservableCollection<ClickData> clicksHistory;  // = new List<ClickData>();
    private readonly Random _random = new Random(); 
    private string test = "";

    public class ClickData
    {
        public string? XValue;
        public int YValue;
    }

    private async Task<ObservableCollection<ClickData>> UpdateUIList()
    {
        subTitle = (!String.IsNullOrEmpty(vanity))? $"Clicks for: {vanity}": "All clicks";
        try{
            CancellationToken cancellationToken = new CancellationToken();
            var response = await Http.PostAsJsonAsync("/api/UrlClickStatsByDay",  new UrlClickStatsRequest(vanity), cancellationToken);
            var jsonResult = await response.Content.ReadAsStringAsync();
            clickStatsList = JsonSerializer.Deserialize<ClickDateList>(jsonResult);
            Console.WriteLine($"===>jsonResult: {jsonResult}");
            var temp = clickStatsList.Items.Select(s => new ClickData{
                                                    XValue = s.DateClicked,
                                                    YValue = s.Count
                                            });                 
            //clicksHistory = temp.ToList();
            //test += "Day(s): " + clicksHistory.Count.ToString();
            StateHasChanged();
            return new ObservableCollection<ClickData>(temp);
        }
        catch (System.Exception ex)
        {
            Console.WriteLine(ex.ToString());
            return null;
        }

    }

    protected override async Task OnParametersSetAsync()
    {
       clicksHistory = await UpdateUIList();
       Console.WriteLine($"===> out of OnParameters");
    } 


     protected override async void OnInitialized()
     {
        clicksHistory = await UpdateUIList();
        test += "Day(s): " + clicksHistory.Count.ToString();
        Console.WriteLine($"===> out of init");
    }
}

// TODO: fix asyn loading https://blazor.syncfusion.com/documentation/chart/working-with-data 